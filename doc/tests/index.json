{
  "stats": {
    "suites": 9,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2018-11-02T17:09:13.841Z",
    "end": "2018-11-02T17:09:13.881Z",
    "duration": 40,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "c044619d-cd1e-4b0b-8ad5-dc1a6619c0ca",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "27c0be6d-85dd-40fe-b9da-41088cfe0442",
        "title": "Client",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/client/client.test.js",
        "file": "/src/client/client.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between client and server",
            "fullTitle": "Client integration test between client and server",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug   = require('@superhero/debug'),\nlog     = new Debug({ debug:false }),\nfactory = require('../../'),\nclient  = factory.createClient(log),\nserver  = factory.createServer(log),\nport    = 18200,\nevent   = 'foobar',\nbody    = { foo:'bar' }\nserver.listen(port)\nclient.connect(port)\nclient.emit(event, body)\nserver.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  client.client.end()\n  server.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "9ef8329d-7707-4ce4-b714-dbc288c88db3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Client possible to remove a listener",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug     = require('@superhero/debug'),\nlog       = new Debug({ debug:false }),\nfactory   = require('../../'),\nclient    = factory.createClient(log),\nevent     = 'foobar',\nlistener  = () => {}\nexpect(client.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nclient.on(event, listener)\nexpect(client.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nclient.removeListener(event, listener)\nexpect(client.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "872ab523-3c40-4c53-b791-cf4f7c54de38",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9ef8329d-7707-4ce4-b714-dbc288c88db3",
          "872ab523-3c40-4c53-b791-cf4f7c54de38"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 14,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "eebebf19-e8de-4fcd-8168-73811c0c7cf4",
        "title": "ConnectionObserver",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/connection-observer/connection-observer.test.js",
        "file": "/src/connection-observer/connection-observer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "attach data event to dispatcher with a context",
            "fullTitle": "ConnectionObserver attach data event to dispatcher with a context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nfactory             = require('../../'),\nconnectionObserver  = factory.createConnectionObserverFactory(log).create(),\nnetSocket           = factory.createNetSocket(),\ndispatcher          = connectionObserver.dispatcher,\nemitter             = connectionObserver.emitter,\ncontext             = factory.createContextFactory().create(netSocket, emitter)\nexpect(netSocket.listenerCount('data')).to.be.equal(0)\nconnectionObserver.attachDataEventToDispatcherWithAContext(netSocket, dispatcher, context)\nexpect(netSocket.listenerCount('data')).to.be.equal(1)",
            "err": {},
            "isRoot": false,
            "uuid": "14b18832-93b7-4da9-a422-06e9dbd10208",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "log socket events",
            "fullTitle": "ConnectionObserver log socket events",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nfactory             = require('../../'),\nconnectionObserver  = factory.createConnectionObserverFactory(log).create(),\nnetSocket           = factory.createNetSocket(),\nemitter             = connectionObserver.emitter\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nconnectionObserver.logSocketEvents(netSocket, log)\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "276a6243-c863-48e8-8380-b3a4ec69293c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "the \"onConnection\" function attaches the expected listeners",
            "fullTitle": "ConnectionObserver the \"onConnection\" function attaches the expected listeners",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nfactory             = require('../../'),\nconnectionObserver  = factory.createConnectionObserverFactory(log).create(),\nnetSocket           = factory.createNetSocket()\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nconnectionObserver.onConnection(netSocket)\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "6b609b6a-0b5e-433e-ae40-8eaa1109c470",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "14b18832-93b7-4da9-a422-06e9dbd10208",
          "276a6243-c863-48e8-8380-b3a4ec69293c",
          "6b609b6a-0b5e-433e-ae40-8eaa1109c470"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "403451a9-d86a-46e6-908c-88d670f230a9",
        "title": "Context",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/context/context.test.js",
        "file": "/src/context/context.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "expected format",
            "fullTitle": "Context expected format",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nfactory       = require('../../'),\nemitter       = factory.createEmitterFactory(log).create(),\nnetSocket     = factory.createNetSocket(),\ncontext       = factory.createContextFactory(log).create(netSocket, emitter),\nPayloadStack  = require('../payload-stack')\nexpect(context.socket).deep.equal(netSocket)\nexpect(context.emit).to.be.a('function')\nexpect(context.payloadStack).to.be.an.instanceof(PayloadStack)",
            "err": {},
            "isRoot": false,
            "uuid": "88b5f666-6ee6-454a-8bca-40e413829290",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "88b5f666-6ee6-454a-8bca-40e413829290"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8f818786-dcb2-489f-80f0-51662d90fd5e",
        "title": "Dispatcher",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/dispatcher/dispatcher.test.js",
        "file": "/src/dispatcher/dispatcher.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "handle error",
            "fullTitle": "Dispatcher handle error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug                   = require('@superhero/debug'),\nlog                     = new Debug({ debug:false }),\nfactory                 = require('../../'),\ndispatcher              = factory.createDispatcherFactory(log).create(),\nIncompleteMessageError  = require('../payload-stack/error/incomplete-message'),\nincompleteMessageError  = new IncompleteMessageError,\nerror                   = new Error,\ncallbackThrows          = dispatcher.handleError.bind(dispatcher, error),\ncallbackDoesNotThrow    = dispatcher.handleError.bind(dispatcher, incompleteMessageError)\nexpect(callbackThrows).to.throw()\nexpect(callbackDoesNotThrow).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "c929c6f9-3449-4524-aba7-5bbfdb839c1e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loop through context buffer to dispatch each message one by one",
            "fullTitle": "Dispatcher loop through context buffer to dispatch each message one by one",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug           = require('@superhero/debug'),\nlog             = new Debug({ debug:false }),\nfactory         = require('../../'),\ndispatcher      = factory.createDispatcherFactory(log).create(),\npayloadFactory  = factory.createPayloadFactory(),\nevent           = 'foobar',\nbody            = { foo:'bar' },\nbuffer          = payloadFactory.create(event, body).toBuffer(),\nemitter         = factory.createEmitterFactory(log).create(),\nport            = 18200,\nnetClient       = require('net').createConnection({ port }),\nnetServer       = require('net').createServer().listen(port),\ncontext         = factory.createContextFactory().create(netClient, emitter)\ncontext.payloadStack.push(buffer, buffer)\nnetClient.on('connect', () => dispatcher.loopThroughContextBufferToDispatchEachMessageOneByOne(context))\nlet i = 0\ndispatcher.events.on(event, (context, data) =>\n{\n  if(++i === 2)\n  {\n    expect(data).to.deep.equal(body)\n    netClient.end()\n    netServer.close()\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "575c336c-a9a7-42e9-950b-0c2ee0369f25",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c929c6f9-3449-4524-aba7-5bbfdb839c1e",
          "575c336c-a9a7-42e9-950b-0c2ee0369f25"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bf6c3335-c401-40cd-8264-1d2fffa770c2",
        "title": "Emitter",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/emitter/emitter.test.js",
        "file": "/src/emitter/emitter.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "write buffer to socket",
            "fullTitle": "Emitter write buffer to socket",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug     = require('@superhero/debug'),\nlog       = new Debug({ debug:false }),\nfactory   = require('../../'),\nemitter   = factory.createEmitterFactory(log).create(),\nport      = 18200,\nnetClient = require('net').createConnection({ port }),\nnetServer = require('net').createServer().listen(port),\nbuffer    = Buffer.from('foobar')\nnetClient.on('connect', async () =>\n{\n  await emitter.writeBufferToSocket(netClient, buffer)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    expect(data.toString()).to.be.equal(buffer.toString())\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "b5948b41-5240-4180-9c1d-e1c2a9682e3a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "emit event with data",
            "fullTitle": "Emitter emit event with data",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nfactory       = require('../../'),\npayloadStack  = factory.createPayloadStackFactory().create(),\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nemitter       = factory.createEmitterFactory(log).create(),\nport          = 18200,\nnetClient     = require('net').createConnection({ port }),\nnetServer     = require('net').createServer().listen(port),\nevent         = 'foobar',\nbody          = { foo:'bar' }\nnetClient.on('connect', async () =>\n{\n  await emitter.emit(netClient, event, body)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    payloadStack.push(data)\n    const dto = payloadStack.shift()\n    expect(dto.event).to.be.equal(event)\n    expect(dto.data).to.deep.equal(body)\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "5c4a4277-5786-4a28-b81e-954aa1c4f46f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b5948b41-5240-4180-9c1d-e1c2a9682e3a",
          "5c4a4277-5786-4a28-b81e-954aa1c4f46f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f5d0472b-e8fb-4361-ae4a-9bb526fb15e3",
        "title": "Payload/Error/IncompleteMessage",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/error/incomplete-message.test.js",
        "file": "/src/payload-stack/error/incomplete-message.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is of expected type",
            "fullTitle": "Payload/Error/IncompleteMessage is of expected type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error).to.be.an.instanceof(Error)",
            "err": {},
            "isRoot": false,
            "uuid": "d21c3fa0-0444-4780-8871-df0deaa9d53f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "has expected error code",
            "fullTitle": "Payload/Error/IncompleteMessage has expected error code",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error.code).to.be.equal('ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "57269f21-6e09-4576-8890-2c7c74886dc4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d21c3fa0-0444-4780-8871-df0deaa9d53f",
          "57269f21-6e09-4576-8890-2c7c74886dc4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ea933a63-2db8-4f8c-aa50-ee1cb2c8d40c",
        "title": "PayloadStack",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/payload-stack.test.js",
        "file": "/src/payload-stack/payload-stack.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "push and shift message from buffer stack",
            "fullTitle": "PayloadStack push and shift message from buffer stack",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nfactory       = require('../../'),\npayloadStack  = factory.createPayloadStackFactory().create(),\nfoo           = 'foobar',\ndata          = { foo:'bar' },\npayload       = factory.createPayloadFactory().create(foo, data),\nbuffer        = payload.toBuffer()\npayloadStack.push(buffer)\nconst message = payloadStack.shift()\nexpect(message.event).to.be.equal(foo)\nexpect(message.data).deep.equal(data)\nexpect(payloadStack.stack.length).to.be.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "998b1d47-b33b-4fc5-8a9b-2e39ef7cbe3d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "shift a message from the buffer stack that holds a broken message",
            "fullTitle": "PayloadStack shift a message from the buffer stack that holds a broken message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nfactory       = require('../../'),\npayloadStack  = factory.createPayloadStackFactory().create(),\nevent         = 'foobar',\ndata          = { foo:'bar' },\npayload       = factory.createPayloadFactory().create(event, data),\nbuffer        = payload.toBuffer().slice(20),\ncallback      = payloadStack.shift.bind(payloadStack)\npayloadStack.push(buffer)\nexpect(callback).to.throw(Error).with.property('code', 'ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "b39cec92-f15f-4eca-a2fb-dd1c9fd881e1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "998b1d47-b33b-4fc5-8a9b-2e39ef7cbe3d",
          "b39cec92-f15f-4eca-a2fb-dd1c9fd881e1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5574c9b8-d941-4faf-9ac2-4b61b1345cc3",
        "title": "Payload",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload/payload.test.js",
        "file": "/src/payload/payload.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is mutable",
            "fullTitle": "Payload is mutable",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent   = 'foobar',\ndata    = { foo:'bar' },\nfactory = require('../../'),\npayload = factory.createPayloadFactory().create(event, data)\npayload.event = 'barbaz'\nexpect(payload.event).to.be.equal(event)",
            "err": {},
            "isRoot": false,
            "uuid": "74ebb578-1904-4d49-b8a8-c138c9b51fa3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can be represented as a buffer",
            "fullTitle": "Payload can be represented as a buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent   = 'foobar',\ndata    = { foo:'bar' },\nfactory = require('../../'),\npayload = factory.createPayloadFactory().create(event, data)\npayload.event = 'barbaz'\nexpect(payload.toBuffer.bind(payload)).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "146550da-7577-49f7-a39b-4f509060f670",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "buffer has a header that describes the correct length of the buffer",
            "fullTitle": "Payload buffer has a header that describes the correct length of the buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent   = 'foobar',\ndata    = { foo:'bar' },\nfactory = require('../../'),\npayload = factory.createPayloadFactory().create(event, data),\nbuffer  = payload.toBuffer(),\nlength  = buffer.readInt32BE(0),\nPayload = require('.')\nexpect(Payload.HEADER_SIZE + length).to.be.equal(buffer.length)",
            "err": {},
            "isRoot": false,
            "uuid": "c9d6e15e-b18f-409f-8452-9cc240365050",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "74ebb578-1904-4d49-b8a8-c138c9b51fa3",
          "146550da-7577-49f7-a39b-4f509060f670",
          "c9d6e15e-b18f-409f-8452-9cc240365050"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0a5e70b4-a1b6-4402-9e98-7d179e16f35f",
        "title": "Server",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/server/server.test.js",
        "file": "/src/server/server.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between server and client",
            "fullTitle": "Server integration test between server and client",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nfactory = require('../../'),\nDebug   = require('@superhero/debug'),\nlog     = new Debug({ debug:false }),\nclient  = factory.createClient(log),\nserver  = factory.createServer(log),\nport    = 18200,\nevent   = 'foobar',\nbody    = { foo:'bar' }\nserver.listen(port)\nclient.connect(port)\nclient.emit(event, body)\nserver.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  context.emit(event, body)\n})\nclient.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  client.client.end()\n  server.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "4709da9f-dd7c-4f7c-b53d-63a6faf5d59d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Server possible to remove a listener",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nfactory   = require('../../'),\nDebug     = require('@superhero/debug'),\nlog       = new Debug({ debug:false }),\nserver    = factory.createServer(log),\nevent     = 'foobar',\nlistener  = () => {}\nexpect(server.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nserver.on(event, listener)\nexpect(server.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nserver.removeListener(event, listener)\nexpect(server.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "c41b8b0f-a267-4079-b207-eba23746f51a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4709da9f-dd7c-4f7c-b53d-63a6faf5d59d",
          "c41b8b0f-a267-4079-b207-eba23746f51a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}