{
  "stats": {
    "suites": 9,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-25T15:22:22.639Z",
    "end": "2018-10-25T15:22:22.667Z",
    "duration": 28,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "fc40df1e-c9c4-4e90-ab81-57496260847a",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e34bdbc1-7a31-4684-bf4e-cdbfc12eb548",
        "title": "Socket/Client",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/client.test.js",
        "file": "/src/client.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test",
            "fullTitle": "Socket/Client integration test",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketServer  = require('./server'),\nsocketServer  = new SocketServer(log),\nSocketClient  = require('./client'),\nsocketClient  = new SocketClient(log),\nport          = 18200,\nevent         = 'foobar',\nbody          = { foo:'bar' }\nsocketServer.listen(port)\nsocketClient.connect(port)\nsocketClient.emit(event, body)\nsocketServer.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  socketClient.client.end()\n  socketServer.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "79526af2-81fd-4c42-8fa5-d3124d8c7bc1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "79526af2-81fd-4c42-8fa5-d3124d8c7bc1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1cc9db96-de02-48ba-8af3-a81145523760",
        "title": "Socket/Connection",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/connection.test.js",
        "file": "/src/connection.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "attach data event to dispatcher with a context",
            "fullTitle": "Socket/Connection attach data event to dispatcher with a context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nEvents            = require('events'),\nevents            = new Events,\nSocketConnection  = require('./connection'),\nsocketConnection  = new SocketConnection(log, events),\nNetSocket         = require('net').Socket,\nnetSocket         = new NetSocket,\ndispatcher        = socketConnection.dispatcher,\nemitter           = socketConnection.emitter,\nSocketContext     = require('./context'),\nsocketContext     = new SocketContext(netSocket, emitter)\nexpect(netSocket.listenerCount('data')).to.be.equal(0)\nsocketConnection.attachDataEventToDispatcherWithAContext(netSocket, dispatcher, context)\nexpect(netSocket.listenerCount('data')).to.be.equal(1)",
            "err": {},
            "isRoot": false,
            "uuid": "11a232f5-2f7e-4e2a-bb8c-0b49fb77381e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "log socket events",
            "fullTitle": "Socket/Connection log socket events",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nEvents            = require('events'),\nevents            = new Events,\nSocketConnection  = require('./connection'),\nsocketConnection  = new SocketConnection(log, events),\nNetSocket         = require('net').Socket,\nnetSocket         = new NetSocket,\nemitter           = socketConnection.emitter\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nsocketConnection.logSocketEvents(netSocket, log)\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "8026bd90-768b-4695-b07c-73d975def900",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "the \"onConnection\" function attaches the expected listeners",
            "fullTitle": "Socket/Connection the \"onConnection\" function attaches the expected listeners",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nEvents            = require('events'),\nevents            = new Events,\nSocketConnection  = require('./connection'),\nsocketConnection  = new SocketConnection(log, events),\nNetSocket         = require('net').Socket,\nnetSocket         = new NetSocket\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nsocketConnection.onConnection(netSocket)\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "358e12cd-d511-4904-91df-0d13fc0ebf9e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "11a232f5-2f7e-4e2a-bb8c-0b49fb77381e",
          "8026bd90-768b-4695-b07c-73d975def900",
          "358e12cd-d511-4904-91df-0d13fc0ebf9e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "eab95ff4-5162-41af-8aef-f267142aa2b6",
        "title": "Socket/Context",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/context.test.js",
        "file": "/src/context.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "expected format",
            "fullTitle": "Socket/Context expected format",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nEmitter       = require('./emitter'),\nemitter       = new Emitter(log),\nNetSocket     = require('net').Socket,\nnetSocket     = new NetSocket,\nSocketContext = require('./context'),\nsocketContext = new SocketContext(netSocket, emitter),\nPayloadStack  = require('./payload-stack')\nexpect(socketContext.socket).deep.equal(netSocket)\nexpect(socketContext.emit).to.be.a('function')\nexpect(socketContext.payloadStack).to.be.an.instanceof(PayloadStack)",
            "err": {},
            "isRoot": false,
            "uuid": "e463c664-a3ef-48ad-b154-506fbeca6a22",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e463c664-a3ef-48ad-b154-506fbeca6a22"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "373afb0e-8abc-4cb0-95b0-dbb30ecc8eb3",
        "title": "Socket/Dispatcher",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/dispatcher.test.js",
        "file": "/src/dispatcher.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "handle error",
            "fullTitle": "Socket/Dispatcher handle error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug                   = require('@superhero/debug'),\nlog                     = new Debug({ debug:false }),\nDispatcher              = require('./dispatcher'),\ndispatcher              = new Dispatcher(log),\nIncompleteMessageError  = require('./payload-stack/error/incomplete-message'),\nincompleteMessageError  = new IncompleteMessageError,\nerror                   = new Error,\ncallbackThrows          = dispatcher.handleError.bind(dispatcher, error),\ncallbackDoesNotThrow    = dispatcher.handleError.bind(dispatcher, incompleteMessageError)\nexpect(callbackThrows).to.throw()\nexpect(callbackDoesNotThrow).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "608caf2c-4d4a-48e4-9a9b-72261b832861",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loop through context buffer to dispatch each message one by one",
            "fullTitle": "Socket/Dispatcher loop through context buffer to dispatch each message one by one",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nSocketDispatcher  = require('./dispatcher'),\nsocketDispatcher  = new SocketDispatcher(log),\nSocketPayload     = require('./payload-stack/payload'),\nevent             = 'foobar',\nbody              = { foo:'bar' },\nbuffer            = new SocketPayload(event, body).toBuffer(),\nSocketEmitter     = require('./emitter'),\nsocketEmitter     = new SocketEmitter(log),\nport              = 18200,\nnetClient         = require('net').createConnection({ port }),\nnetServer         = require('net').createServer().listen(port),\nSocketContext     = require('./context'),\nsocketContext     = new SocketContext(netClient, socketEmitter)\nsocketContext.payloadStack.push(buffer, buffer)\nnetClient.on('connect', () => socketDispatcher.loopThroughContextBufferToDispatchEachMessageOneByOne(socketContext))\nlet i = 0\nsocketDispatcher.events.on(event, (context, data) =>\n{\n  if(++i === 2)\n  {\n    expect(data).to.deep.equal(body)\n    netClient.end()\n    netServer.close()\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "1cbb8572-e905-4d56-b4ce-c099ea023fad",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "608caf2c-4d4a-48e4-9a9b-72261b832861",
          "1cbb8572-e905-4d56-b4ce-c099ea023fad"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "727a9c1c-c2a9-4b19-b156-9e89216180ee",
        "title": "Socket/Emitter",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/emitter.test.js",
        "file": "/src/emitter.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "write buffer to socket",
            "fullTitle": "Socket/Emitter write buffer to socket",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketEmitter = require('./emitter'),\nsocketEmitter = new SocketEmitter(log),\nport          = 18200,\nnetClient     = require('net').createConnection({ port }),\nnetServer     = require('net').createServer().listen(port),\nbuffer        = Buffer.from('foobar')\nnetClient.on('connect', async () =>\n{\n  await socketEmitter.writeBufferToSocket(netClient, buffer)\n})\nnetServer.on('connection', (socket) => socket.on('data', (data) =>\n{\n  expect(data.toString()).to.be.equal(buffer.toString())\n  socket.end()\n  netServer.close()\n}))\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "b8d43154-484f-42ef-b852-1dca23e1f139",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "emit event with data",
            "fullTitle": "Socket/Emitter emit event with data",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./payload-stack'),\nsocketPayloadStack  = new SocketPayloadStack,\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nSocketEmitter       = require('./emitter'),\nsocketEmitter       = new SocketEmitter(log),\nport                = 18200,\nnetClient           = require('net').createConnection({ port }),\nnetServer           = require('net').createServer().listen(port),\nevent               = 'foobar',\nbody                = { foo:'bar' }\nnetClient.on('connect', async () =>\n{\n  await socketEmitter.emit(netClient, event, body)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    socketPayloadStack.push(data)\n    const dto = socketPayloadStack.shift()\n    expect(dto.event).to.be.equal(event)\n    expect(dto.data).to.deep.equal(body)\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "f7a8f33c-1d86-41c0-be21-3f42a31a1a1a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b8d43154-484f-42ef-b852-1dca23e1f139",
          "f7a8f33c-1d86-41c0-be21-3f42a31a1a1a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "21345ca6-0e21-445e-aabf-544757bfc217",
        "title": "Socket/Payload/Error/IncompleteMessage",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/error/incomplete-message.test.js",
        "file": "/src/payload-stack/error/incomplete-message.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is of expected type",
            "fullTitle": "Socket/Payload/Error/IncompleteMessage is of expected type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error).to.be.an.instanceof(Error)",
            "err": {},
            "isRoot": false,
            "uuid": "f0840bd2-1b2c-4c67-8bea-0436d265a4e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "has expected error code",
            "fullTitle": "Socket/Payload/Error/IncompleteMessage has expected error code",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error.code).to.be.equal('ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "a315577c-7596-4dad-901f-fe323fbe2897",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f0840bd2-1b2c-4c67-8bea-0436d265a4e6",
          "a315577c-7596-4dad-901f-fe323fbe2897"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1bf04710-ca5b-4aa8-89b7-69b7277eb8c0",
        "title": "Socket/PayloadStack",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/index.test.js",
        "file": "/src/payload-stack/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "push and shift message from buffer stack",
            "fullTitle": "Socket/PayloadStack push and shift message from buffer stack",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./index'),\nsocketPayloadStack  = new SocketPayloadStack,\nfoo                 = 'foobar',\ndata                = { foo:'bar' },\nSocketPayload       = require('./payload'),\nsocketPayload       = new SocketPayload(foo, data),\nbuffer              = socketPayload.toBuffer()\nsocketPayloadStack.push(buffer)\nconst message = socketPayloadStack.shift()\nexpect(message.event).to.be.equal(foo)\nexpect(message.data).deep.equal(data)\nexpect(socketPayloadStack.stack.length).to.be.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "60f13059-2a67-4090-8e5b-6f44980ed991",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "shift a message from the buffer stack that holds a broken message",
            "fullTitle": "Socket/PayloadStack shift a message from the buffer stack that holds a broken message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./index'),\nsocketPayloadStack  = new SocketPayloadStack,\nevent               = 'foobar',\ndata                = { foo:'bar' },\nSocketPayload       = require('./payload'),\nsocketPayload       = new SocketPayload(event, data),\nbuffer              = socketPayload.toBuffer().slice(20),\ncallback            = socketPayloadStack.shift.bind(socketPayloadStack)\nsocketPayloadStack.push(buffer)\nexpect(callback).to.throw(Error).with.property('code', 'ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "326dfd19-2630-4f72-8771-ed0a06c642fa",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "60f13059-2a67-4090-8e5b-6f44980ed991",
          "326dfd19-2630-4f72-8771-ed0a06c642fa"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "560c0f6d-b3d7-4273-bf52-8891e0cbc2ac",
        "title": "Socket/PayloadStack/Payload",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/payload/index.test.js",
        "file": "/src/payload-stack/payload/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is mutable",
            "fullTitle": "Socket/PayloadStack/Payload is mutable",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = new SocketPayload(event, data)\nsocketPayload.event = 'barbaz'\nexpect(socketPayload.event).to.be.equal(event)",
            "err": {},
            "isRoot": false,
            "uuid": "4b35ec7e-83f8-4819-90a6-4b8e94a77d37",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can be represented as a buffer",
            "fullTitle": "Socket/PayloadStack/Payload can be represented as a buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = new SocketPayload(event, data)\nsocketPayload.event = 'barbaz'\nexpect(socketPayload.toBuffer.bind(socketPayload)).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "499ff3f3-03f0-4726-b9ea-2c3a53aaddf5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "buffer has a header that describes the correct length of the buffer",
            "fullTitle": "Socket/PayloadStack/Payload buffer has a header that describes the correct length of the buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = new SocketPayload(event, data),\nbuffer = socketPayload.toBuffer(),\nlength = buffer.readInt32BE(0)\nexpect(SocketPayload.HEADER_SIZE + length).to.be.equal(buffer.length)",
            "err": {},
            "isRoot": false,
            "uuid": "6fd19fa7-0593-4963-b999-b6016eae88b2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4b35ec7e-83f8-4819-90a6-4b8e94a77d37",
          "499ff3f3-03f0-4726-b9ea-2c3a53aaddf5",
          "6fd19fa7-0593-4963-b999-b6016eae88b2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "79502896-93ad-4d47-9ed8-34c7e7d835c7",
        "title": "Socket/Server",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/server.test.js",
        "file": "/src/server.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between server and client",
            "fullTitle": "Socket/Server integration test between server and client",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketServer  = require('./server'),\nsocketServer  = new SocketServer(log),\nSocketClient  = require('./client'),\nsocketClient  = new SocketClient(log),\nport          = 18200,\nevent         = 'foobar',\nbody          = { foo:'bar' }\nsocketServer.listen(port)\nsocketClient.connect(port)\nsocketClient.emit(event, body)\nsocketServer.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  context.emit(event, body)\n})\nsocketClient.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  socketClient.client.end()\n  socketServer.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "af4450cb-d0f5-4ad2-8e41-70b37a6e3027",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "af4450cb-d0f5-4ad2-8e41-70b37a6e3027"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}