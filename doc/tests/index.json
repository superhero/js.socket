{
  "stats": {
    "suites": 9,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-26T14:50:38.358Z",
    "end": "2018-10-26T14:50:38.383Z",
    "duration": 25,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "a8297b82-344a-483d-ac05-9b67c208d9e3",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d236af0f-8c92-4217-9273-1d48d38c87d1",
        "title": "Socket/Client",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/client.test.js",
        "file": "/src/client.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between client and server",
            "fullTitle": "Socket/Client integration test between client and server",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketServer  = require('./server'),\nsocketServer  = new SocketServer(log),\nSocketClient  = require('./client'),\nsocketClient  = new SocketClient(log),\nport          = 18200,\nevent         = 'foobar',\nbody          = { foo:'bar' }\nsocketServer.listen(port)\nsocketClient.connect(port)\nsocketClient.emit(event, body)\nsocketServer.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  socketClient.client.end()\n  socketServer.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "047dc6a2-8f8c-4971-a2c3-4d17c3523e7c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Socket/Client possible to remove a listener",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketClient  = require('./client'),\nsocketClient  = new SocketClient(log),\nevent         = 'foobar',\nlistener      = () => {}\nexpect(socketClient.connection.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nsocketClient.on(event, listener)\nexpect(socketClient.connection.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nsocketClient.removeListener(event, listener)\nexpect(socketClient.connection.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "e3b9d263-8cf9-4ff7-ae0d-1fe1cfcb4ad7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "047dc6a2-8f8c-4971-a2c3-4d17c3523e7c",
          "e3b9d263-8cf9-4ff7-ae0d-1fe1cfcb4ad7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1437999c-fbaa-485d-ada2-d472292d15f0",
        "title": "Socket/Connection",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/connection.test.js",
        "file": "/src/connection.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "attach data event to dispatcher with a context",
            "fullTitle": "Socket/Connection attach data event to dispatcher with a context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nEvents            = require('events'),\nevents            = new Events,\nSocketConnection  = require('./connection'),\nsocketConnection  = new SocketConnection(log, events),\nNetSocket         = require('net').Socket,\nnetSocket         = new NetSocket,\ndispatcher        = socketConnection.dispatcher,\nemitter           = socketConnection.emitter,\nSocketContext     = require('./context'),\nsocketContext     = new SocketContext(netSocket, emitter)\nexpect(netSocket.listenerCount('data')).to.be.equal(0)\nsocketConnection.attachDataEventToDispatcherWithAContext(netSocket, dispatcher, context)\nexpect(netSocket.listenerCount('data')).to.be.equal(1)",
            "err": {},
            "isRoot": false,
            "uuid": "28985981-4c7d-4240-8a76-45e95c0b730c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "log socket events",
            "fullTitle": "Socket/Connection log socket events",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nEvents            = require('events'),\nevents            = new Events,\nSocketConnection  = require('./connection'),\nsocketConnection  = new SocketConnection(log, events),\nNetSocket         = require('net').Socket,\nnetSocket         = new NetSocket,\nemitter           = socketConnection.emitter\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nsocketConnection.logSocketEvents(netSocket, log)\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "1b208a78-edbe-4a76-aacc-16d0455e3025",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "the \"onConnection\" function attaches the expected listeners",
            "fullTitle": "Socket/Connection the \"onConnection\" function attaches the expected listeners",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nEvents            = require('events'),\nevents            = new Events,\nSocketConnection  = require('./connection'),\nsocketConnection  = new SocketConnection(log, events),\nNetSocket         = require('net').Socket,\nnetSocket         = new NetSocket\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nsocketConnection.onConnection(netSocket)\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "0e1a68d5-5a92-42bd-8a1d-57482a64c963",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "28985981-4c7d-4240-8a76-45e95c0b730c",
          "1b208a78-edbe-4a76-aacc-16d0455e3025",
          "0e1a68d5-5a92-42bd-8a1d-57482a64c963"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "258b7927-1ad0-44ba-ac97-da673a18a57d",
        "title": "Socket/Context",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/context.test.js",
        "file": "/src/context.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "expected format",
            "fullTitle": "Socket/Context expected format",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nEmitter       = require('./emitter'),\nemitter       = new Emitter(log),\nNetSocket     = require('net').Socket,\nnetSocket     = new NetSocket,\nSocketContext = require('./context'),\nsocketContext = new SocketContext(netSocket, emitter),\nPayloadStack  = require('./payload-stack')\nexpect(socketContext.socket).deep.equal(netSocket)\nexpect(socketContext.emit).to.be.a('function')\nexpect(socketContext.payloadStack).to.be.an.instanceof(PayloadStack)",
            "err": {},
            "isRoot": false,
            "uuid": "b230988a-63b9-4c8f-b898-b147d50fd01d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b230988a-63b9-4c8f-b898-b147d50fd01d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "32c7e65d-a0ce-4d91-91ee-4e0c44255b48",
        "title": "Socket/Dispatcher",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/dispatcher.test.js",
        "file": "/src/dispatcher.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "handle error",
            "fullTitle": "Socket/Dispatcher handle error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug                   = require('@superhero/debug'),\nlog                     = new Debug({ debug:false }),\nDispatcher              = require('./dispatcher'),\ndispatcher              = new Dispatcher(log),\nIncompleteMessageError  = require('./payload-stack/error/incomplete-message'),\nincompleteMessageError  = new IncompleteMessageError,\nerror                   = new Error,\ncallbackThrows          = dispatcher.handleError.bind(dispatcher, error),\ncallbackDoesNotThrow    = dispatcher.handleError.bind(dispatcher, incompleteMessageError)\nexpect(callbackThrows).to.throw()\nexpect(callbackDoesNotThrow).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "01dc64f9-3c98-4e13-98f3-ac2ea4685f45",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loop through context buffer to dispatch each message one by one",
            "fullTitle": "Socket/Dispatcher loop through context buffer to dispatch each message one by one",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nSocketDispatcher  = require('./dispatcher'),\nsocketDispatcher  = new SocketDispatcher(log),\nSocketPayload     = require('./payload-stack/payload'),\nevent             = 'foobar',\nbody              = { foo:'bar' },\nbuffer            = new SocketPayload(event, body).toBuffer(),\nSocketEmitter     = require('./emitter'),\nsocketEmitter     = new SocketEmitter(log),\nport              = 18200,\nnetClient         = require('net').createConnection({ port }),\nnetServer         = require('net').createServer().listen(port),\nSocketContext     = require('./context'),\nsocketContext     = new SocketContext(netClient, socketEmitter)\nsocketContext.payloadStack.push(buffer, buffer)\nnetClient.on('connect', () => socketDispatcher.loopThroughContextBufferToDispatchEachMessageOneByOne(socketContext))\nlet i = 0\nsocketDispatcher.events.on(event, (context, data) =>\n{\n  if(++i === 2)\n  {\n    expect(data).to.deep.equal(body)\n    netClient.end()\n    netServer.close()\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "f0abf415-9584-4a0a-9c33-59c0a09e4ab2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "01dc64f9-3c98-4e13-98f3-ac2ea4685f45",
          "f0abf415-9584-4a0a-9c33-59c0a09e4ab2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fe07c003-d31f-4b29-9523-456232d123bc",
        "title": "Socket/Emitter",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/emitter.test.js",
        "file": "/src/emitter.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "write buffer to socket",
            "fullTitle": "Socket/Emitter write buffer to socket",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketEmitter = require('./emitter'),\nsocketEmitter = new SocketEmitter(log),\nport          = 18200,\nnetClient     = require('net').createConnection({ port }),\nnetServer     = require('net').createServer().listen(port),\nbuffer        = Buffer.from('foobar')\nnetClient.on('connect', async () =>\n{\n  await socketEmitter.writeBufferToSocket(netClient, buffer)\n})\nnetServer.on('connection', (socket) => socket.on('data', (data) =>\n{\n  expect(data.toString()).to.be.equal(buffer.toString())\n  socket.end()\n  netServer.close()\n}))\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "fd86e080-56b9-4ee4-bc49-d486c84f72e9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "emit event with data",
            "fullTitle": "Socket/Emitter emit event with data",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./payload-stack'),\nsocketPayloadStack  = new SocketPayloadStack,\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nSocketEmitter       = require('./emitter'),\nsocketEmitter       = new SocketEmitter(log),\nport                = 18200,\nnetClient           = require('net').createConnection({ port }),\nnetServer           = require('net').createServer().listen(port),\nevent               = 'foobar',\nbody                = { foo:'bar' }\nnetClient.on('connect', async () =>\n{\n  await socketEmitter.emit(netClient, event, body)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    socketPayloadStack.push(data)\n    const dto = socketPayloadStack.shift()\n    expect(dto.event).to.be.equal(event)\n    expect(dto.data).to.deep.equal(body)\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "7d0649d5-3c70-4ad2-8435-4a03725c5aee",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "fd86e080-56b9-4ee4-bc49-d486c84f72e9",
          "7d0649d5-3c70-4ad2-8435-4a03725c5aee"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "45ce3337-0547-4ac0-bbf2-c74b1477c2df",
        "title": "Socket/Payload/Error/IncompleteMessage",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/error/incomplete-message.test.js",
        "file": "/src/payload-stack/error/incomplete-message.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is of expected type",
            "fullTitle": "Socket/Payload/Error/IncompleteMessage is of expected type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error).to.be.an.instanceof(Error)",
            "err": {},
            "isRoot": false,
            "uuid": "971da53e-f47c-442e-846f-b476aeef7ce5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "has expected error code",
            "fullTitle": "Socket/Payload/Error/IncompleteMessage has expected error code",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error.code).to.be.equal('ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "65a1863f-cc3a-4775-b092-b621bd6f7da1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "971da53e-f47c-442e-846f-b476aeef7ce5",
          "65a1863f-cc3a-4775-b092-b621bd6f7da1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b4b82a5d-4444-4c65-bcfa-afecff94b7b5",
        "title": "Socket/PayloadStack",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/index.test.js",
        "file": "/src/payload-stack/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "push and shift message from buffer stack",
            "fullTitle": "Socket/PayloadStack push and shift message from buffer stack",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./index'),\nsocketPayloadStack  = new SocketPayloadStack,\nfoo                 = 'foobar',\ndata                = { foo:'bar' },\nSocketPayload       = require('./payload'),\nsocketPayload       = new SocketPayload(foo, data),\nbuffer              = socketPayload.toBuffer()\nsocketPayloadStack.push(buffer)\nconst message = socketPayloadStack.shift()\nexpect(message.event).to.be.equal(foo)\nexpect(message.data).deep.equal(data)\nexpect(socketPayloadStack.stack.length).to.be.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "c469166e-77df-4444-ba10-e5d0efff4ab2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "shift a message from the buffer stack that holds a broken message",
            "fullTitle": "Socket/PayloadStack shift a message from the buffer stack that holds a broken message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./index'),\nsocketPayloadStack  = new SocketPayloadStack,\nevent               = 'foobar',\ndata                = { foo:'bar' },\nSocketPayload       = require('./payload'),\nsocketPayload       = new SocketPayload(event, data),\nbuffer              = socketPayload.toBuffer().slice(20),\ncallback            = socketPayloadStack.shift.bind(socketPayloadStack)\nsocketPayloadStack.push(buffer)\nexpect(callback).to.throw(Error).with.property('code', 'ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "bad51fbb-f465-46b0-b246-cb9ed4f8f230",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c469166e-77df-4444-ba10-e5d0efff4ab2",
          "bad51fbb-f465-46b0-b246-cb9ed4f8f230"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b279ee4c-b204-4480-adf0-55f6ea8820e0",
        "title": "Socket/PayloadStack/Payload",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/payload/index.test.js",
        "file": "/src/payload-stack/payload/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is mutable",
            "fullTitle": "Socket/PayloadStack/Payload is mutable",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = new SocketPayload(event, data)\nsocketPayload.event = 'barbaz'\nexpect(socketPayload.event).to.be.equal(event)",
            "err": {},
            "isRoot": false,
            "uuid": "b5a86896-285e-433d-94e6-494fb1638379",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can be represented as a buffer",
            "fullTitle": "Socket/PayloadStack/Payload can be represented as a buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = new SocketPayload(event, data)\nsocketPayload.event = 'barbaz'\nexpect(socketPayload.toBuffer.bind(socketPayload)).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "c716c5f0-e91a-4674-8467-7dad33186029",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "buffer has a header that describes the correct length of the buffer",
            "fullTitle": "Socket/PayloadStack/Payload buffer has a header that describes the correct length of the buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = new SocketPayload(event, data),\nbuffer = socketPayload.toBuffer(),\nlength = buffer.readInt32BE(0)\nexpect(SocketPayload.HEADER_SIZE + length).to.be.equal(buffer.length)",
            "err": {},
            "isRoot": false,
            "uuid": "46cd7205-65d6-4e31-885b-89bfbf280d51",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b5a86896-285e-433d-94e6-494fb1638379",
          "c716c5f0-e91a-4674-8467-7dad33186029",
          "46cd7205-65d6-4e31-885b-89bfbf280d51"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7a63ab90-fca6-4afe-9138-26399a2bbb32",
        "title": "Socket/Server",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/server.test.js",
        "file": "/src/server.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between server and client",
            "fullTitle": "Socket/Server integration test between server and client",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketServer  = require('./server'),\nsocketServer  = new SocketServer(log),\nSocketClient  = require('./client'),\nsocketClient  = new SocketClient(log),\nport          = 18200,\nevent         = 'foobar',\nbody          = { foo:'bar' }\nsocketServer.listen(port)\nsocketClient.connect(port)\nsocketClient.emit(event, body)\nsocketServer.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  context.emit(event, body)\n})\nsocketClient.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  socketClient.client.end()\n  socketServer.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "2e550109-4c33-4b08-971e-0f85ccc64082",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Socket/Server possible to remove a listener",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketServer  = require('./server'),\nsocketServer  = new SocketServer(log),\nevent         = 'foobar',\nlistener      = () => {}\nexpect(socketServer.connection.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nsocketServer.on(event, listener)\nexpect(socketServer.connection.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nsocketServer.removeListener(event, listener)\nexpect(socketServer.connection.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "6ec6f4a0-5a65-4183-a916-e64e76b01e67",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2e550109-4c33-4b08-971e-0f85ccc64082",
          "6ec6f4a0-5a65-4183-a916-e64e76b01e67"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}