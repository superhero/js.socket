{
  "stats": {
    "suites": 9,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-29T12:52:43.367Z",
    "end": "2018-10-29T12:52:43.397Z",
    "duration": 30,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "6f6d892c-11c1-4b77-8e87-d03fde30eb4f",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "cbefabe2-ec87-48c5-84d7-350b549f5b4d",
        "title": "Socket/Client",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/client.test.js",
        "file": "/src/client.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between client and server",
            "fullTitle": "Socket/Client integration test between client and server",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:true }),\nSocketServer  = require('./server'),\nsocketServer  = SocketServer.from(log),\nSocketClient  = require('./client'),\nsocketClient  = SocketClient.from(log),\nport          = 18200,\nevent         = 'foobar',\nbody          = { foo:'bar' }\nsocketServer.listen(port)\nsocketClient.connect(port)\nsocketClient.emit(event, body)\nsocketServer.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  socketClient.client.end()\n  socketServer.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "0dcb9734-d0be-4095-80ca-f116f18f0512",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Socket/Client possible to remove a listener",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketClient  = require('./client'),\nsocketClient  = SocketClient.from(log),\nevent         = 'foobar',\nlistener      = () => {}\nexpect(socketClient.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nsocketClient.on(event, listener)\nexpect(socketClient.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nsocketClient.removeListener(event, listener)\nexpect(socketClient.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "73bf3828-3a3c-4064-8042-308cd8c0774c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0dcb9734-d0be-4095-80ca-f116f18f0512",
          "73bf3828-3a3c-4064-8042-308cd8c0774c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 13,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cbb7e3f5-7736-473b-bdde-4be34a8c3c9f",
        "title": "Socket/ConnectionObserver",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/connection-observer.test.js",
        "file": "/src/connection-observer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "attach data event to dispatcher with a context",
            "fullTitle": "Socket/ConnectionObserver attach data event to dispatcher with a context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nEvents              = require('events'),\nevents              = new Events,\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log, events),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket,\ndispatcher          = connectionObserver.dispatcher,\nemitter             = connectionObserver.emitter,\nSocketContext       = require('./context'),\nsocketContext       = SocketContext.from(netSocket, emitter)\nexpect(netSocket.listenerCount('data')).to.be.equal(0)\nconnectionObserver.attachDataEventToDispatcherWithAContext(netSocket, dispatcher, context)\nexpect(netSocket.listenerCount('data')).to.be.equal(1)",
            "err": {},
            "isRoot": false,
            "uuid": "e8c9f59d-dbdb-490c-84b1-4c5e3539cc97",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "log socket events",
            "fullTitle": "Socket/ConnectionObserver log socket events",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nEvents              = require('events'),\nevents              = new Events,\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log, events),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket,\nemitter             = connectionObserver.emitter\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nconnectionObserver.logSocketEvents(netSocket, log)\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "fa7957b3-da48-41cd-b1c6-1b6600528237",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "the \"onConnection\" function attaches the expected listeners",
            "fullTitle": "Socket/ConnectionObserver the \"onConnection\" function attaches the expected listeners",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nEvents              = require('events'),\nevents              = new Events,\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log, events),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nconnectionObserver.onConnection(netSocket)\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "0005c3fe-662c-45e4-923c-60588e4c7787",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e8c9f59d-dbdb-490c-84b1-4c5e3539cc97",
          "fa7957b3-da48-41cd-b1c6-1b6600528237",
          "0005c3fe-662c-45e4-923c-60588e4c7787"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "92d1d46f-31bc-4c2a-b822-112f62e8e8c8",
        "title": "Socket/Context",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/context.test.js",
        "file": "/src/context.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "expected format",
            "fullTitle": "Socket/Context expected format",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nEmitter       = require('./emitter'),\nemitter       = Emitter.from(log),\nNetSocket     = require('net').Socket,\nnetSocket     = new NetSocket,\nSocketContext = require('./context'),\nsocketContext = SocketContext.from(netSocket, emitter),\nPayloadStack  = require('./payload-stack')\nexpect(socketContext.socket).deep.equal(netSocket)\nexpect(socketContext.emit).to.be.a('function')\nexpect(socketContext.payloadStack).to.be.an.instanceof(PayloadStack)",
            "err": {},
            "isRoot": false,
            "uuid": "d11ba4d6-0c5b-4e7b-9a4f-36704c997f7a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d11ba4d6-0c5b-4e7b-9a4f-36704c997f7a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ecf2a928-312a-4a35-88e2-05a0d015252b",
        "title": "Socket/Dispatcher",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/dispatcher.test.js",
        "file": "/src/dispatcher.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "handle error",
            "fullTitle": "Socket/Dispatcher handle error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug                   = require('@superhero/debug'),\nlog                     = new Debug({ debug:false }),\nDispatcher              = require('./dispatcher'),\ndispatcher              = Dispatcher.from(log),\nIncompleteMessageError  = require('./payload-stack/error/incomplete-message'),\nincompleteMessageError  = new IncompleteMessageError,\nerror                   = new Error,\ncallbackThrows          = dispatcher.handleError.bind(dispatcher, error),\ncallbackDoesNotThrow    = dispatcher.handleError.bind(dispatcher, incompleteMessageError)\nexpect(callbackThrows).to.throw()\nexpect(callbackDoesNotThrow).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "3e6229df-c335-47ce-a384-e8095e4d7438",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loop through context buffer to dispatch each message one by one",
            "fullTitle": "Socket/Dispatcher loop through context buffer to dispatch each message one by one",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nSocketDispatcher  = require('./dispatcher'),\nsocketDispatcher  = SocketDispatcher.from(log),\nSocketPayload     = require('./payload-stack/payload'),\nevent             = 'foobar',\nbody              = { foo:'bar' },\nbuffer            = SocketPayload.from(event, body).toBuffer(),\nSocketEmitter     = require('./emitter'),\nsocketEmitter     = SocketEmitter.from(log),\nport              = 18200,\nnetClient         = require('net').createConnection({ port }),\nnetServer         = require('net').createServer().listen(port),\nSocketContext     = require('./context'),\nsocketContext     = SocketContext.from(netClient, socketEmitter)\nsocketContext.payloadStack.push(buffer, buffer)\nnetClient.on('connect', () => socketDispatcher.loopThroughContextBufferToDispatchEachMessageOneByOne(socketContext))\nlet i = 0\nsocketDispatcher.events.on(event, (context, data) =>\n{\n  if(++i === 2)\n  {\n    expect(data).to.deep.equal(body)\n    netClient.end()\n    netServer.close()\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "07419139-4f6b-49d7-9c62-937f36aac339",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3e6229df-c335-47ce-a384-e8095e4d7438",
          "07419139-4f6b-49d7-9c62-937f36aac339"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "52e5a685-5a2a-4f45-8d27-f75741f2cf9b",
        "title": "Socket/Emitter",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/emitter.test.js",
        "file": "/src/emitter.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "write buffer to socket",
            "fullTitle": "Socket/Emitter write buffer to socket",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug     = require('@superhero/debug'),\nlog       = new Debug({ debug:false }),\nEmitter   = require('./emitter'),\nemitter   = Emitter.from(log),\nport      = 18200,\nnetClient = require('net').createConnection({ port }),\nnetServer = require('net').createServer().listen(port),\nbuffer    = Buffer.from('foobar')\nnetClient.on('connect', async () =>\n{\n  await emitter.writeBufferToSocket(netClient, buffer)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    expect(data.toString()).to.be.equal(buffer.toString())\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "476c57da-6e96-48f7-8b01-6dcf9dbae63c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "emit event with data",
            "fullTitle": "Socket/Emitter emit event with data",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nPayloadStack  = require('./payload-stack'),\npayloadStack  = PayloadStack.from(),\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nEmitter       = require('./emitter'),\nemitter       = Emitter.from(log),\nport          = 18200,\nnetClient     = require('net').createConnection({ port }),\nnetServer     = require('net').createServer().listen(port),\nevent         = 'foobar',\nbody          = { foo:'bar' }\nnetClient.on('connect', async () =>\n{\n  await emitter.emit(netClient, event, body)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    payloadStack.push(data)\n    const dto = payloadStack.shift()\n    expect(dto.event).to.be.equal(event)\n    expect(dto.data).to.deep.equal(body)\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "ee7b18e8-b86a-410a-a466-d7a01e229de7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "476c57da-6e96-48f7-8b01-6dcf9dbae63c",
          "ee7b18e8-b86a-410a-a466-d7a01e229de7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "52a577e1-3a9d-4fe6-95f7-d760363a39d2",
        "title": "Socket/Payload/Error/IncompleteMessage",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/error/incomplete-message.test.js",
        "file": "/src/payload-stack/error/incomplete-message.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is of expected type",
            "fullTitle": "Socket/Payload/Error/IncompleteMessage is of expected type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error).to.be.an.instanceof(Error)",
            "err": {},
            "isRoot": false,
            "uuid": "1d88dc7d-b41d-4898-8232-9d32d8cde428",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "has expected error code",
            "fullTitle": "Socket/Payload/Error/IncompleteMessage has expected error code",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error.code).to.be.equal('ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "5fcf7130-a708-48f8-af17-6c4e7dd2cf90",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1d88dc7d-b41d-4898-8232-9d32d8cde428",
          "5fcf7130-a708-48f8-af17-6c4e7dd2cf90"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "766a2aa6-db54-4a4c-9064-fb45b89fda5e",
        "title": "Socket/PayloadStack",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/index.test.js",
        "file": "/src/payload-stack/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "push and shift message from buffer stack",
            "fullTitle": "Socket/PayloadStack push and shift message from buffer stack",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./index'),\nsocketPayloadStack  = SocketPayloadStack.from(),\nfoo                 = 'foobar',\ndata                = { foo:'bar' },\nSocketPayload       = require('./payload'),\nsocketPayload       = SocketPayload.from(foo, data),\nbuffer              = socketPayload.toBuffer()\nsocketPayloadStack.push(buffer)\nconst message = socketPayloadStack.shift()\nexpect(message.event).to.be.equal(foo)\nexpect(message.data).deep.equal(data)\nexpect(socketPayloadStack.stack.length).to.be.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "fc55727f-5c72-40b2-a139-3fe138a0ce16",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "shift a message from the buffer stack that holds a broken message",
            "fullTitle": "Socket/PayloadStack shift a message from the buffer stack that holds a broken message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./index'),\nsocketPayloadStack  = SocketPayloadStack.from(),\nevent               = 'foobar',\ndata                = { foo:'bar' },\nSocketPayload       = require('./payload'),\nsocketPayload       = SocketPayload.from(event, data),\nbuffer              = socketPayload.toBuffer().slice(20),\ncallback            = socketPayloadStack.shift.bind(socketPayloadStack)\nsocketPayloadStack.push(buffer)\nexpect(callback).to.throw(Error).with.property('code', 'ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "6ccbf5a7-dba6-4d23-85cd-183579048fa7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "fc55727f-5c72-40b2-a139-3fe138a0ce16",
          "6ccbf5a7-dba6-4d23-85cd-183579048fa7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "32a71ddc-c84d-430c-bb1d-cdf4264a18b5",
        "title": "Socket/PayloadStack/Payload",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/payload/index.test.js",
        "file": "/src/payload-stack/payload/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is mutable",
            "fullTitle": "Socket/PayloadStack/Payload is mutable",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = SocketPayload.from(event, data)\nsocketPayload.event = 'barbaz'\nexpect(socketPayload.event).to.be.equal(event)",
            "err": {},
            "isRoot": false,
            "uuid": "f4c5cc2a-a504-4653-815b-3723f215992b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can be represented as a buffer",
            "fullTitle": "Socket/PayloadStack/Payload can be represented as a buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = SocketPayload.from(event, data)\nsocketPayload.event = 'barbaz'\nexpect(socketPayload.toBuffer.bind(socketPayload)).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "91593082-a687-43ea-adbd-1a415adb4089",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "buffer has a header that describes the correct length of the buffer",
            "fullTitle": "Socket/PayloadStack/Payload buffer has a header that describes the correct length of the buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = SocketPayload.from(event, data),\nbuffer = socketPayload.toBuffer(),\nlength = buffer.readInt32BE(0)\nexpect(SocketPayload.HEADER_SIZE + length).to.be.equal(buffer.length)",
            "err": {},
            "isRoot": false,
            "uuid": "e3e8158c-172d-4a4b-a0eb-ec64c3d8ceca",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f4c5cc2a-a504-4653-815b-3723f215992b",
          "91593082-a687-43ea-adbd-1a415adb4089",
          "e3e8158c-172d-4a4b-a0eb-ec64c3d8ceca"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "058adf64-e95d-4403-934b-a354025bc1cf",
        "title": "Socket/Server",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/server.test.js",
        "file": "/src/server.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between server and client",
            "fullTitle": "Socket/Server integration test between server and client",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug   = require('@superhero/debug'),\nlog     = new Debug({ debug:false }),\nServer  = require('./server'),\nserver  = Server.from(log),\nClient  = require('./client'),\nclient  = Client.from(log),\nport    = 18200,\nevent   = 'foobar',\nbody    = { foo:'bar' }\nserver.listen(port)\nclient.connect(port)\nclient.emit(event, body)\nserver.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  context.emit(event, body)\n})\nclient.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  client.client.end()\n  server.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "ba27cc3c-2c44-422f-8fc0-c7bb202ae791",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Socket/Server possible to remove a listener",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketServer  = require('./server'),\nsocketServer  = SocketServer.from(log),\nevent         = 'foobar',\nlistener      = () => {}\nexpect(socketServer.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nsocketServer.on(event, listener)\nexpect(socketServer.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nsocketServer.removeListener(event, listener)\nexpect(socketServer.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "eaba259c-7fb4-40fe-b64f-ddb51d518686",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ba27cc3c-2c44-422f-8fc0-c7bb202ae791",
          "eaba259c-7fb4-40fe-b64f-ddb51d518686"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}