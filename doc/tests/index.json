{
  "stats": {
    "suites": 9,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-30T18:53:18.098Z",
    "end": "2018-10-30T18:53:18.125Z",
    "duration": 27,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9a5e8cb0-66c7-4c0c-93ec-d959bc1a4f8e",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e51f5c14-6d3b-41a3-8ff3-e662d8848d54",
        "title": "Client",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/client.test.js",
        "file": "/src/client.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between client and server",
            "fullTitle": "Client integration test between client and server",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug   = require('@superhero/debug'),\nlog     = new Debug({ debug:false }),\nServer  = require('./server'),\nserver  = Server.from(log),\nClient  = require('./client'),\nclient  = Client.from(log),\nport    = 18200,\nevent   = 'foobar',\nbody    = { foo:'bar' }\nserver.listen(port)\nclient.connect(port)\nclient.emit(event, body)\nserver.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  client.client.end()\n  server.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "3514c598-99db-43f2-abe5-cbf38b035904",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Client possible to remove a listener",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug     = require('@superhero/debug'),\nlog       = new Debug({ debug:false }),\nClient    = require('./client'),\nclient    = Client.from(log),\nevent     = 'foobar',\nlistener  = () => {}\nexpect(client.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nclient.on(event, listener)\nexpect(client.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nclient.removeListener(event, listener)\nexpect(client.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "745e638d-3ebb-423f-9785-0987d9e7b91b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3514c598-99db-43f2-abe5-cbf38b035904",
          "745e638d-3ebb-423f-9785-0987d9e7b91b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6c8b885e-f3ac-4f89-8559-bd97da550446",
        "title": "ConnectionObserver",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/connection-observer.test.js",
        "file": "/src/connection-observer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "attach data event to dispatcher with a context",
            "fullTitle": "ConnectionObserver attach data event to dispatcher with a context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket,\ndispatcher          = connectionObserver.dispatcher,\nemitter             = connectionObserver.emitter,\nSocketContext       = require('./context'),\nsocketContext       = SocketContext.from(netSocket, emitter)\nexpect(netSocket.listenerCount('data')).to.be.equal(0)\nconnectionObserver.attachDataEventToDispatcherWithAContext(netSocket, dispatcher, context)\nexpect(netSocket.listenerCount('data')).to.be.equal(1)",
            "err": {},
            "isRoot": false,
            "uuid": "fa1a8549-6da8-47f6-84a6-8498ac303364",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "log socket events",
            "fullTitle": "ConnectionObserver log socket events",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket,\nemitter             = connectionObserver.emitter\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nconnectionObserver.logSocketEvents(netSocket, log)\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "8acf4c3e-5f0e-496f-9622-d067149c3081",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "the \"onConnection\" function attaches the expected listeners",
            "fullTitle": "ConnectionObserver the \"onConnection\" function attaches the expected listeners",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nconnectionObserver.onConnection(netSocket)\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "e0e6b8bc-02f4-4fe1-a1ac-03e494db88c0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "fa1a8549-6da8-47f6-84a6-8498ac303364",
          "8acf4c3e-5f0e-496f-9622-d067149c3081",
          "e0e6b8bc-02f4-4fe1-a1ac-03e494db88c0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fccf640f-d515-45f2-956e-e1341b8fa173",
        "title": "Context",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/context.test.js",
        "file": "/src/context.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "expected format",
            "fullTitle": "Context expected format",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nEmitter       = require('./emitter'),\nemitter       = Emitter.from(log),\nNetSocket     = require('net').Socket,\nnetSocket     = new NetSocket,\nContext       = require('./context'),\ncontext       = Context.from(netSocket, emitter),\nPayloadStack  = require('./payload-stack')\nexpect(context.socket).deep.equal(netSocket)\nexpect(context.emit).to.be.a('function')\nexpect(context.payloadStack).to.be.an.instanceof(PayloadStack)",
            "err": {},
            "isRoot": false,
            "uuid": "3e4c28ef-9808-426b-9ccd-c4a4451ed878",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3e4c28ef-9808-426b-9ccd-c4a4451ed878"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9b1b72b1-70f4-4f20-a02d-9a23f7fa75af",
        "title": "Dispatcher",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/dispatcher.test.js",
        "file": "/src/dispatcher.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "handle error",
            "fullTitle": "Dispatcher handle error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug                   = require('@superhero/debug'),\nlog                     = new Debug({ debug:false }),\nDispatcher              = require('./dispatcher'),\ndispatcher              = Dispatcher.from(log),\nIncompleteMessageError  = require('./payload-stack/error/incomplete-message'),\nincompleteMessageError  = new IncompleteMessageError,\nerror                   = new Error,\ncallbackThrows          = dispatcher.handleError.bind(dispatcher, error),\ncallbackDoesNotThrow    = dispatcher.handleError.bind(dispatcher, incompleteMessageError)\nexpect(callbackThrows).to.throw()\nexpect(callbackDoesNotThrow).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "23c03d39-73b2-4a1a-ba16-7f4784bc60a4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loop through context buffer to dispatch each message one by one",
            "fullTitle": "Dispatcher loop through context buffer to dispatch each message one by one",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug       = require('@superhero/debug'),\nlog         = new Debug({ debug:false }),\nDispatcher  = require('./dispatcher'),\ndispatcher  = Dispatcher.from(log),\nPayload     = require('./payload-stack/payload'),\nevent       = 'foobar',\nbody        = { foo:'bar' },\nbuffer      = Payload.from(event, body).toBuffer(),\nEmitter     = require('./emitter'),\nemitter     = Emitter.from(log),\nport        = 18200,\nnetClient   = require('net').createConnection({ port }),\nnetServer   = require('net').createServer().listen(port),\nContext     = require('./context'),\ncontext     = Context.from(netClient, emitter)\ncontext.payloadStack.push(buffer, buffer)\nnetClient.on('connect', () => dispatcher.loopThroughContextBufferToDispatchEachMessageOneByOne(context))\nlet i = 0\ndispatcher.events.on(event, (context, data) =>\n{\n  if(++i === 2)\n  {\n    expect(data).to.deep.equal(body)\n    netClient.end()\n    netServer.close()\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "151ef3e0-b271-4a2e-8da1-28b3cabafb3b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "23c03d39-73b2-4a1a-ba16-7f4784bc60a4",
          "151ef3e0-b271-4a2e-8da1-28b3cabafb3b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dc7d5772-c949-4f57-add4-20a995d9105a",
        "title": "Emitter",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/emitter.test.js",
        "file": "/src/emitter.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "write buffer to socket",
            "fullTitle": "Emitter write buffer to socket",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug     = require('@superhero/debug'),\nlog       = new Debug({ debug:false }),\nEmitter   = require('./emitter'),\nemitter   = Emitter.from(log),\nport      = 18200,\nnetClient = require('net').createConnection({ port }),\nnetServer = require('net').createServer().listen(port),\nbuffer    = Buffer.from('foobar')\nnetClient.on('connect', async () =>\n{\n  await emitter.writeBufferToSocket(netClient, buffer)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    expect(data.toString()).to.be.equal(buffer.toString())\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "a24de4f9-69db-4582-8402-68eb76878202",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "emit event with data",
            "fullTitle": "Emitter emit event with data",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nPayloadStack  = require('./payload-stack'),\npayloadStack  = PayloadStack.from(),\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nEmitter       = require('./emitter'),\nemitter       = Emitter.from(log),\nport          = 18200,\nnetClient     = require('net').createConnection({ port }),\nnetServer     = require('net').createServer().listen(port),\nevent         = 'foobar',\nbody          = { foo:'bar' }\nnetClient.on('connect', async () =>\n{\n  await emitter.emit(netClient, event, body)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    payloadStack.push(data)\n    const dto = payloadStack.shift()\n    expect(dto.event).to.be.equal(event)\n    expect(dto.data).to.deep.equal(body)\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "db750089-51d3-4a78-b6fc-de15e44e580a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a24de4f9-69db-4582-8402-68eb76878202",
          "db750089-51d3-4a78-b6fc-de15e44e580a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3861825f-c3f4-4bda-a629-c4d0b7d0d803",
        "title": "Payload/Error/IncompleteMessage",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/error/incomplete-message.test.js",
        "file": "/src/payload-stack/error/incomplete-message.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is of expected type",
            "fullTitle": "Payload/Error/IncompleteMessage is of expected type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error).to.be.an.instanceof(Error)",
            "err": {},
            "isRoot": false,
            "uuid": "7cf10581-bfc2-4fed-9638-e469f170eb9b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "has expected error code",
            "fullTitle": "Payload/Error/IncompleteMessage has expected error code",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error.code).to.be.equal('ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "bd14cbeb-e2cc-48dd-b367-03e3c44951e6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7cf10581-bfc2-4fed-9638-e469f170eb9b",
          "bd14cbeb-e2cc-48dd-b367-03e3c44951e6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a5cc667f-22ed-4da7-bc34-97513df3f701",
        "title": "PayloadStack",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/index.test.js",
        "file": "/src/payload-stack/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "push and shift message from buffer stack",
            "fullTitle": "PayloadStack push and shift message from buffer stack",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nPayloadStack  = require('./index'),\npayloadStack  = PayloadStack.from(),\nfoo           = 'foobar',\ndata          = { foo:'bar' },\nPayload       = require('./payload'),\npayload       = Payload.from(foo, data),\nbuffer        = payload.toBuffer()\npayloadStack.push(buffer)\nconst message = payloadStack.shift()\nexpect(message.event).to.be.equal(foo)\nexpect(message.data).deep.equal(data)\nexpect(payloadStack.stack.length).to.be.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "926ecd06-e09f-4d0c-a7cc-38551a0ae693",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "shift a message from the buffer stack that holds a broken message",
            "fullTitle": "PayloadStack shift a message from the buffer stack that holds a broken message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nPayloadStack  = require('./index'),\npayloadStack  = PayloadStack.from(),\nevent         = 'foobar',\ndata          = { foo:'bar' },\nPayload       = require('./payload'),\npayload       = Payload.from(event, data),\nbuffer        = payload.toBuffer().slice(20),\ncallback      = payloadStack.shift.bind(payloadStack)\npayloadStack.push(buffer)\nexpect(callback).to.throw(Error).with.property('code', 'ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "4b92f7f6-8cbc-4ec6-a76c-588f3303e7e0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "926ecd06-e09f-4d0c-a7cc-38551a0ae693",
          "4b92f7f6-8cbc-4ec6-a76c-588f3303e7e0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c564df3e-d12b-4325-8366-a0248d79dea9",
        "title": "Payload",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/payload/index.test.js",
        "file": "/src/payload-stack/payload/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is mutable",
            "fullTitle": "Payload is mutable",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent   = 'foobar',\ndata    = { foo:'bar' },\nPayload = require('./index'),\npayload = Payload.from(event, data)\npayload.event = 'barbaz'\nexpect(payload.event).to.be.equal(event)",
            "err": {},
            "isRoot": false,
            "uuid": "e411fd78-8093-40e0-ad8c-6ea8172a3ef3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can be represented as a buffer",
            "fullTitle": "Payload can be represented as a buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent   = 'foobar',\ndata    = { foo:'bar' },\nPayload = require('./index'),\npayload = Payload.from(event, data)\npayload.event = 'barbaz'\nexpect(payload.toBuffer.bind(payload)).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "58d35afc-ed0b-436f-98f2-c01177dafcc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "buffer has a header that describes the correct length of the buffer",
            "fullTitle": "Payload buffer has a header that describes the correct length of the buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent   = 'foobar',\ndata    = { foo:'bar' },\nPayload = require('./index'),\npayload = Payload.from(event, data),\nbuffer  = payload.toBuffer(),\nlength  = buffer.readInt32BE(0)\nexpect(Payload.HEADER_SIZE + length).to.be.equal(buffer.length)",
            "err": {},
            "isRoot": false,
            "uuid": "c9a63e4d-4706-409a-92b1-92d6ec2c331f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e411fd78-8093-40e0-ad8c-6ea8172a3ef3",
          "58d35afc-ed0b-436f-98f2-c01177dafcc4",
          "c9a63e4d-4706-409a-92b1-92d6ec2c331f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a48cce57-4f8a-4b5d-94b5-9e212a0489f4",
        "title": "Server",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/server.test.js",
        "file": "/src/server.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between server and client",
            "fullTitle": "Server integration test between server and client",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug   = require('@superhero/debug'),\nlog     = new Debug({ debug:false }),\nServer  = require('./server'),\nserver  = Server.from(log),\nClient  = require('./client'),\nclient  = Client.from(log),\nport    = 18200,\nevent   = 'foobar',\nbody    = { foo:'bar' }\nserver.listen(port)\nclient.connect(port)\nclient.emit(event, body)\nserver.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  context.emit(event, body)\n})\nclient.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  client.client.end()\n  server.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "a989762f-d17e-4b18-9a49-f1dc7ca0b660",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Server possible to remove a listener",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug     = require('@superhero/debug'),\nlog       = new Debug({ debug:false }),\nServer    = require('./server'),\nserver    = Server.from(log),\nevent     = 'foobar',\nlistener  = () => {}\nexpect(server.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nserver.on(event, listener)\nexpect(server.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nserver.removeListener(event, listener)\nexpect(server.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "83a12f6b-c071-4c92-ac6b-35bb03610493",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a989762f-d17e-4b18-9a49-f1dc7ca0b660",
          "83a12f6b-c071-4c92-ac6b-35bb03610493"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}