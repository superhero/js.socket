{
  "stats": {
    "suites": 9,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-30T14:12:03.360Z",
    "end": "2018-10-30T14:12:03.386Z",
    "duration": 26,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "26905a69-e44c-4fc7-afbc-f20cfff8c78a",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "73bfef4a-c0d9-40e3-8739-a63961fa6899",
        "title": "Client",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/client.test.js",
        "file": "/src/client.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between client and server",
            "fullTitle": "Client integration test between client and server",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketServer  = require('./server'),\nsocketServer  = SocketServer.from(log),\nSocketClient  = require('./client'),\nsocketClient  = SocketClient.from(log),\nport          = 18200,\nevent         = 'foobar',\nbody          = { foo:'bar' }\nsocketServer.listen(port)\nsocketClient.connect(port)\nsocketClient.emit(event, body)\nsocketServer.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  socketClient.client.end()\n  socketServer.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "c1828dc9-5c19-4e59-bd50-2b115531c49e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Client possible to remove a listener",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketClient  = require('./client'),\nsocketClient  = SocketClient.from(log),\nevent         = 'foobar',\nlistener      = () => {}\nexpect(socketClient.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nsocketClient.on(event, listener)\nexpect(socketClient.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nsocketClient.removeListener(event, listener)\nexpect(socketClient.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "422a1d24-5859-4038-a003-eae860b09def",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c1828dc9-5c19-4e59-bd50-2b115531c49e",
          "422a1d24-5859-4038-a003-eae860b09def"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a8a1f80e-62f5-4144-94be-7880f2a91a64",
        "title": "ConnectionObserver",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/connection-observer.test.js",
        "file": "/src/connection-observer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "attach data event to dispatcher with a context",
            "fullTitle": "ConnectionObserver attach data event to dispatcher with a context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nEvents              = require('events'),\nevents              = new Events,\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log, events),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket,\ndispatcher          = connectionObserver.dispatcher,\nemitter             = connectionObserver.emitter,\nSocketContext       = require('./context'),\nsocketContext       = SocketContext.from(netSocket, emitter)\nexpect(netSocket.listenerCount('data')).to.be.equal(0)\nconnectionObserver.attachDataEventToDispatcherWithAContext(netSocket, dispatcher, context)\nexpect(netSocket.listenerCount('data')).to.be.equal(1)",
            "err": {},
            "isRoot": false,
            "uuid": "8a0ff5e9-54cf-48e1-993c-ae1ed29bf921",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "log socket events",
            "fullTitle": "ConnectionObserver log socket events",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nEvents              = require('events'),\nevents              = new Events,\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log, events),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket,\nemitter             = connectionObserver.emitter\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nconnectionObserver.logSocketEvents(netSocket, log)\nfor(const event of ['close','connection','drain','lookup','timeout','error'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "965ac144-c2a9-4b91-b6f1-b8b92b822c84",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "the \"onConnection\" function attaches the expected listeners",
            "fullTitle": "ConnectionObserver the \"onConnection\" function attaches the expected listeners",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug               = require('@superhero/debug'),\nlog                 = new Debug({ debug:false }),\nEvents              = require('events'),\nevents              = new Events,\nConnectionObserver  = require('./connection-observer'),\nconnectionObserver  = ConnectionObserver.from(log, events),\nNetSocket           = require('net').Socket,\nnetSocket           = new NetSocket\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 0)\nconnectionObserver.onConnection(netSocket)\nfor(const event of ['close','connection','drain','lookup','timeout','error','data'])\n  expect(event + netSocket.listenerCount(event)).to.be.equal(event + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "24159c02-9d53-4235-908c-58abccca13be",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8a0ff5e9-54cf-48e1-993c-ae1ed29bf921",
          "965ac144-c2a9-4b91-b6f1-b8b92b822c84",
          "24159c02-9d53-4235-908c-58abccca13be"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "315267e9-d9f6-40fb-b7d6-ecf9edb643b5",
        "title": "Context",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/context.test.js",
        "file": "/src/context.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "expected format",
            "fullTitle": "Context expected format",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nEmitter       = require('./emitter'),\nemitter       = Emitter.from(log),\nNetSocket     = require('net').Socket,\nnetSocket     = new NetSocket,\nSocketContext = require('./context'),\nsocketContext = SocketContext.from(netSocket, emitter),\nPayloadStack  = require('./payload-stack')\nexpect(socketContext.socket).deep.equal(netSocket)\nexpect(socketContext.emit).to.be.a('function')\nexpect(socketContext.payloadStack).to.be.an.instanceof(PayloadStack)",
            "err": {},
            "isRoot": false,
            "uuid": "6e3b46df-494a-42d3-b833-b8a0e1f489cf",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6e3b46df-494a-42d3-b833-b8a0e1f489cf"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e73191eb-61c3-4360-890a-053e5d877323",
        "title": "Dispatcher",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/dispatcher.test.js",
        "file": "/src/dispatcher.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "handle error",
            "fullTitle": "Dispatcher handle error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug                   = require('@superhero/debug'),\nlog                     = new Debug({ debug:false }),\nDispatcher              = require('./dispatcher'),\ndispatcher              = Dispatcher.from(log),\nIncompleteMessageError  = require('./payload-stack/error/incomplete-message'),\nincompleteMessageError  = new IncompleteMessageError,\nerror                   = new Error,\ncallbackThrows          = dispatcher.handleError.bind(dispatcher, error),\ncallbackDoesNotThrow    = dispatcher.handleError.bind(dispatcher, incompleteMessageError)\nexpect(callbackThrows).to.throw()\nexpect(callbackDoesNotThrow).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "13d167c0-ddeb-473b-a1e6-adc12dde8cd0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loop through context buffer to dispatch each message one by one",
            "fullTitle": "Dispatcher loop through context buffer to dispatch each message one by one",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug             = require('@superhero/debug'),\nlog               = new Debug({ debug:false }),\nSocketDispatcher  = require('./dispatcher'),\nsocketDispatcher  = SocketDispatcher.from(log),\nSocketPayload     = require('./payload-stack/payload'),\nevent             = 'foobar',\nbody              = { foo:'bar' },\nbuffer            = SocketPayload.from(event, body).toBuffer(),\nSocketEmitter     = require('./emitter'),\nsocketEmitter     = SocketEmitter.from(log),\nport              = 18200,\nnetClient         = require('net').createConnection({ port }),\nnetServer         = require('net').createServer().listen(port),\nSocketContext     = require('./context'),\nsocketContext     = SocketContext.from(netClient, socketEmitter)\nsocketContext.payloadStack.push(buffer, buffer)\nnetClient.on('connect', () => socketDispatcher.loopThroughContextBufferToDispatchEachMessageOneByOne(socketContext))\nlet i = 0\nsocketDispatcher.events.on(event, (context, data) =>\n{\n  if(++i === 2)\n  {\n    expect(data).to.deep.equal(body)\n    netClient.end()\n    netServer.close()\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "50b38833-1d0d-4073-a109-0898226dd277",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "13d167c0-ddeb-473b-a1e6-adc12dde8cd0",
          "50b38833-1d0d-4073-a109-0898226dd277"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0ea10ec9-b84d-4427-8430-325bfd301513",
        "title": "Emitter",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/emitter.test.js",
        "file": "/src/emitter.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "write buffer to socket",
            "fullTitle": "Emitter write buffer to socket",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug     = require('@superhero/debug'),\nlog       = new Debug({ debug:false }),\nEmitter   = require('./emitter'),\nemitter   = Emitter.from(log),\nport      = 18200,\nnetClient = require('net').createConnection({ port }),\nnetServer = require('net').createServer().listen(port),\nbuffer    = Buffer.from('foobar')\nnetClient.on('connect', async () =>\n{\n  await emitter.writeBufferToSocket(netClient, buffer)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    expect(data.toString()).to.be.equal(buffer.toString())\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "41bee1f2-e946-4f45-b7bb-a1768f544817",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "emit event with data",
            "fullTitle": "Emitter emit event with data",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nPayloadStack  = require('./payload-stack'),\npayloadStack  = PayloadStack.from(),\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nEmitter       = require('./emitter'),\nemitter       = Emitter.from(log),\nport          = 18200,\nnetClient     = require('net').createConnection({ port }),\nnetServer     = require('net').createServer().listen(port),\nevent         = 'foobar',\nbody          = { foo:'bar' }\nnetClient.on('connect', async () =>\n{\n  await emitter.emit(netClient, event, body)\n})\nnetServer.on('connection', (socket) =>\n{\n  socket.on('data', (data) =>\n  {\n    payloadStack.push(data)\n    const dto = payloadStack.shift()\n    expect(dto.event).to.be.equal(event)\n    expect(dto.data).to.deep.equal(body)\n    socket.end()\n    netServer.close()\n  })\n})\nnetServer.on('close', () => done())",
            "err": {},
            "isRoot": false,
            "uuid": "480c930a-1821-4ce3-8184-ccdf7f9261ce",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "41bee1f2-e946-4f45-b7bb-a1768f544817",
          "480c930a-1821-4ce3-8184-ccdf7f9261ce"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "054a8070-1cce-4e5f-92e0-c1b2d7f13a3a",
        "title": "Payload/Error/IncompleteMessage",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/error/incomplete-message.test.js",
        "file": "/src/payload-stack/error/incomplete-message.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is of expected type",
            "fullTitle": "Payload/Error/IncompleteMessage is of expected type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error).to.be.an.instanceof(Error)",
            "err": {},
            "isRoot": false,
            "uuid": "0e78e5ab-0612-4ad0-8fc3-f4804056501e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "has expected error code",
            "fullTitle": "Payload/Error/IncompleteMessage has expected error code",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nIncompleteMessageError = require('./incomplete-message'),\nerror = new IncompleteMessageError\nexpect(error.code).to.be.equal('ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "8ffd7b43-28f6-4ef1-853a-44150dac728f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0e78e5ab-0612-4ad0-8fc3-f4804056501e",
          "8ffd7b43-28f6-4ef1-853a-44150dac728f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9fb0516b-954b-4d31-adc1-be18578e8424",
        "title": "PayloadStack",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/index.test.js",
        "file": "/src/payload-stack/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "push and shift message from buffer stack",
            "fullTitle": "PayloadStack push and shift message from buffer stack",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./index'),\nsocketPayloadStack  = SocketPayloadStack.from(),\nfoo                 = 'foobar',\ndata                = { foo:'bar' },\nSocketPayload       = require('./payload'),\nsocketPayload       = SocketPayload.from(foo, data),\nbuffer              = socketPayload.toBuffer()\nsocketPayloadStack.push(buffer)\nconst message = socketPayloadStack.shift()\nexpect(message.event).to.be.equal(foo)\nexpect(message.data).deep.equal(data)\nexpect(socketPayloadStack.stack.length).to.be.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "adc9a534-c5c6-47ee-8c4a-d973a3a694e5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "shift a message from the buffer stack that holds a broken message",
            "fullTitle": "PayloadStack shift a message from the buffer stack that holds a broken message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nSocketPayloadStack  = require('./index'),\nsocketPayloadStack  = SocketPayloadStack.from(),\nevent               = 'foobar',\ndata                = { foo:'bar' },\nSocketPayload       = require('./payload'),\nsocketPayload       = SocketPayload.from(event, data),\nbuffer              = socketPayload.toBuffer().slice(20),\ncallback            = socketPayloadStack.shift.bind(socketPayloadStack)\nsocketPayloadStack.push(buffer)\nexpect(callback).to.throw(Error).with.property('code', 'ERR_INCOMPLETE_MESSAGE')",
            "err": {},
            "isRoot": false,
            "uuid": "660f6219-8637-4842-a6d3-37ff9f74a283",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "adc9a534-c5c6-47ee-8c4a-d973a3a694e5",
          "660f6219-8637-4842-a6d3-37ff9f74a283"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "47e33e86-d57a-4e5b-aa3c-59187ab029e5",
        "title": "Payload",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/payload-stack/payload/index.test.js",
        "file": "/src/payload-stack/payload/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is mutable",
            "fullTitle": "Payload is mutable",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = SocketPayload.from(event, data)\nsocketPayload.event = 'barbaz'\nexpect(socketPayload.event).to.be.equal(event)",
            "err": {},
            "isRoot": false,
            "uuid": "322fbd32-1c10-4fd4-b4aa-677087fb4b06",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can be represented as a buffer",
            "fullTitle": "Payload can be represented as a buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = SocketPayload.from(event, data)\nsocketPayload.event = 'barbaz'\nexpect(socketPayload.toBuffer.bind(socketPayload)).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "9801104f-d313-4d70-b2fd-b529256f2d42",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "buffer has a header that describes the correct length of the buffer",
            "fullTitle": "Payload buffer has a header that describes the correct length of the buffer",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevent = 'foobar',\ndata  = { foo:'bar' },\nSocketPayload = require('./index'),\nsocketPayload = SocketPayload.from(event, data),\nbuffer = socketPayload.toBuffer(),\nlength = buffer.readInt32BE(0)\nexpect(SocketPayload.HEADER_SIZE + length).to.be.equal(buffer.length)",
            "err": {},
            "isRoot": false,
            "uuid": "87076738-eacf-4888-aec2-124cdcf3d393",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "322fbd32-1c10-4fd4-b4aa-677087fb4b06",
          "9801104f-d313-4d70-b2fd-b529256f2d42",
          "87076738-eacf-4888-aec2-124cdcf3d393"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36c1b6c3-e41b-40ef-833b-10ebe9655491",
        "title": "Server",
        "fullFile": "/home/erik/Projects/@superhero/js.socket/src/server.test.js",
        "file": "/src/server.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "integration test between server and client",
            "fullTitle": "Server integration test between server and client",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug   = require('@superhero/debug'),\nlog     = new Debug({ debug:false }),\nServer  = require('./server'),\nserver  = Server.from(log),\nClient  = require('./client'),\nclient  = Client.from(log),\nport    = 18200,\nevent   = 'foobar',\nbody    = { foo:'bar' }\nserver.listen(port)\nclient.connect(port)\nclient.emit(event, body)\nserver.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  context.emit(event, body)\n})\nclient.on(event, (context, data) =>\n{\n  expect(data).to.deep.equal(body)\n  client.client.end()\n  server.server.close()\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "2715d2b0-2cb1-4af1-bb94-7a7f3af85970",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to remove a listener",
            "fullTitle": "Server possible to remove a listener",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nDebug         = require('@superhero/debug'),\nlog           = new Debug({ debug:false }),\nSocketServer  = require('./server'),\nsocketServer  = SocketServer.from(log),\nevent         = 'foobar',\nlistener      = () => {}\nexpect(socketServer.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)\nsocketServer.on(event, listener)\nexpect(socketServer.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(1)\nsocketServer.removeListener(event, listener)\nexpect(socketServer.connectionObserver.dispatcher.events.listenerCount(event)).to.deep.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "0c4abe94-484b-46a9-9abe-9d6702c796a4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2715d2b0-2cb1-4af1-bb94-7a7f3af85970",
          "0c4abe94-484b-46a9-9abe-9d6702c796a4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}